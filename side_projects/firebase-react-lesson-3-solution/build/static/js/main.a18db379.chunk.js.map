{"version":3,"sources":["services/firebase.js","components/ListItem.js","components/InputField.js","components/TodoList.js","pages/LoggedIn.js","components/LoginForm.js","components/RegistrationForm.js","pages/LoggedOut.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","writeTo","dataToWriteTo","value","databaseRef","ref","push","listenTo","dataToListenTo","callbackFunction","on","snapshot","update","keyToUpdate","remove","getCurrentUser","auth","currentUser","isLoggedIn","signIn","email","password","signInWithEmailAndPassword","onLoginChange","authRef","onAuthStateChanged","user","signOut","createUser","createUserWithEmailAndPassword","ListItem","props","listItem","data","isChecked","firebaseKey","isCheckedClasses","className","onClick","uid","message","time","itemToRemove","InputField","onSubmit","event","preventDefault","todoListItem","Date","toLocaleString","state","setState","handleChange","target","this","onChange","type","React","Component","TodoList","isLoading","messagesRef","firebaseData","val","off","role","formattedData","Object","entries","map","key","LoggedIn","LoginForm","catch","error","errorMessage","handleEmailChange","handlePasswordChange","placeholder","RegistrationForm","LoggedOut","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a18db379.chunk.js","sourcesContent":["// Import base firebase code\nimport firebase from 'firebase/app';\n// Import database functions, because we plan on using them\nimport 'firebase/database';\nimport 'firebase/auth';\n\n// Set the configuration for your app\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB_zvf9R8WS23l8b-Koul3iICZh993pcmM\",\n    authDomain: \"fir-course-2a3de.firebaseapp.com\",\n    databaseURL: \"https://fir-course-2a3de.firebaseio.com\",\n    projectId: \"fir-course-2a3de\",\n    storageBucket: \"fir-course-2a3de.appspot.com\",\n    messagingSenderId: \"933397481741\",\n    appId: \"1:933397481741:web:023944ca7a43318abf8844\"\n  };\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Get a reference to the database service\nconst database = firebase.database();\n\n/**\n * Listens to a path in Firebase and then will call the passed function with the data as a parameter\n *\n * @param {string} dataToListenTo E.g. \"messages\"\n * @param {Function} callbackFunction\n * @returns {Object} Firebase reference\n */\nconst listenTo = (dataToListenTo = '', callbackFunction = () => {}) => {\n    const databaseRef = database.ref(dataToListenTo);\n\n    databaseRef.on('value', (snapshot) => {\n        callbackFunction(snapshot);\n    });\n\n    return databaseRef;\n}\n\n/**\n * Adds a piece of information to the passed collection.\n * If the collection does not exist, it is created\n * @param {string} dataToWriteTo E.g. \"messages\"\n * @param {*} value E.g. { data: \"value\" }\n */\nconst writeTo = (dataToWriteTo = '', value) => {\n    const databaseRef = database.ref(dataToWriteTo);\n\n    databaseRef.push(value);\n}\n\n/**\n * Updates a path with the passed value\n * @param {string} keyToUpdate E.g. \"messages/{messageId}\"\n * @param {*} value { data: \"value\" }\n */\nconst update = (keyToUpdate = '', value) => {\n    const databaseRef = database.ref(keyToUpdate);\n\n    databaseRef.update(value);\n}\n\n/**\n * Removes a particular entry in Firebase\n * @param {string} keyToUpdate E.g. \"messages/{messageId}\"\n */\nconst remove = (keyToUpdate = '') => {\n    const databaseRef = database.ref(keyToUpdate);\n\n    databaseRef.remove();\n}\n\n/**\n * Gets the current user from Firebase\n * @returns {Object|undefined}\n */\nconst getCurrentUser = () => {\n    return firebase.auth().currentUser;\n}\n\n/**\n * Tests if the user is logged in or not\n * @returns {boolean}\n */\nconst isLoggedIn = () => {\n    if (firebase.auth().currentUser) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Try to login to Firebase using an email and password\n * @param {string} email\n * @param {string} password\n * @returns {Promise}\n */\nconst signIn = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password)\n}\n\n/**\n * Creates a listener for when the login state changes\n * @param {Function} callbackFunction\n */\nconst onLoginChange = (callbackFunction = () => {}) => {\n    const authRef = firebase.auth().onAuthStateChanged((user) => {\n        callbackFunction(user);\n    });\n\n    return authRef;\n}\n\n/**\n * Signs the current user out\n * @returns {Promise}\n */\nconst signOut = () => {\n    return firebase.auth().signOut();\n}\n\n/**\n * Creates a user with an email and password in Firebase.\n * Will automatically log them in when this is successful\n * @param {string} email\n * @param {string} password\n * @returns {Promise}\n */\nconst createUser = (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password)\n}\n\nexport default {\n    writeTo,\n    listenTo,\n    update,\n    remove,\n    getCurrentUser,\n    isLoggedIn,\n    signIn,\n    onLoginChange,\n    signOut,\n    createUser\n}","import React from 'react';\n\nimport firebase from '../services/firebase';\n\nconst ListItem = (props) => {\n  // listItem is the current item in the list\n  const listItem = props.data;\n  const isChecked = listItem.isChecked;\n  // firebaseKey is the key that Firebase uses for this piece of data\n  const firebaseKey = props.firebaseKey;\n\n\n  // We can use this to toggle that the item is to be checked off\n  const toggleIsChecked = () => {\n    listItem.isChecked = !listItem.isChecked;\n    firebase.update(`messages/${firebase.getCurrentUser().uid}/${firebaseKey}`, listItem);\n  }\n\n\n  // We can use this to remove this item from our Firebase Database\n  const removeItem = () => {\n    const itemToRemove = `messages/${firebase.getCurrentUser().uid}/${firebaseKey}`;\n    firebase.remove(itemToRemove);\n  }\n\n\n  // A simple way to add extra classes to an element based on some state of the list item\n  const isCheckedClasses = isChecked ? 'list-group-item-secondary text-muted' : '';\n\n  return (\n    <div className={`${isCheckedClasses} list-group-item list-group-item d-flex justify-content-between align-items-center`}>\n      <div onClick={toggleIsChecked} className=\"w-100\">\n        {listItem.message}\n        <br />\n        <small className=\"text-muted\">{listItem.time}</small>\n      </div>\n      <span onClick={removeItem} className=\"badge badge-danger badge-pill\">x</span>\n    </div>\n  );\n}\n\nexport default ListItem;\n","import React from 'react';\n\nimport firebase from '../services/firebase';\n\n/**\n * There are a few different ways of tackling forms in React. In this example,\n * we save each change made into this.state. We do this because it can make it\n * easier to empty the field once we submit some data\n */\nclass InputField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: ''\n    }\n  }\n\n  onSubmit = (event) => {\n    /**\n     * As we have a form, normally this would submit data and cause a page\n     * refresh, but we don't want that!\n     *\n     * The \"onSubmit\" function will return to us an Event object which is the\n     * event that would be fired when a user normally clicks a button. Using\n     * JavaScript, we can prevent the default action of this button, and we can\n     * then take control of what happens next\n     */\n    event.preventDefault();\n\n    // Scaffold out our data\n    const todoListItem = {\n      time: (new Date()).toLocaleString('en-gb'),\n      message: this.state.value,\n      isChecked: false\n    };\n\n    // Write our data\n    firebase.writeTo(`messages/${firebase.getCurrentUser().uid}`, todoListItem);\n\n    // Reset our input field to not have a value\n    this.setState({value: ''})\n  }\n\n  /**\n   * When the field changes, we need to synchronise this data back into our\n   * state\n   */\n  handleChange = (event) => {\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={this.onSubmit}\n        className=\"d-flex flex-row form-group\"\n      >\n        <input\n          value={this.state.value}\n          onChange={this.handleChange}\n          className=\"form-control w-100\"\n          type=\"text\"\n        />\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default InputField;\n","import React from 'react';\n\nimport firebase from '../services/firebase';\nimport ListItem from './ListItem';\nimport InputField from './InputField';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      data: {}\n    };\n\n    this.messagesRef = null;\n  }\n\n  componentDidMount() {\n    /**\n     * Before, we only listened to \"messages\", but now that no-one has\n     * permission to read the \"messages\" object, we must ask for every message\n     * under our UserID (which is provided for us by Firebase). That's why we\n     * now make the request to `messages/${firebase.getCurrentUser().uid}`\n     */\n    this.messagesRef = firebase.listenTo(`messages/${firebase.getCurrentUser().uid}`, (firebaseData) => {\n      // We call .val() to get an actual data object, rather than a Firebase object\n      this.setState({\n        isLoading: false,\n        data: firebaseData.val()\n      });\n    });\n  }\n\n  // We must unmount this otherwise we'll end up with an open connection\n  componentWillUnmount() {\n    this.messagesRef.off();\n  }\n\n  render() {\n    if(this.state.isLoading) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      )\n    }\n\n    // Sometimes we might want to re-structure the data we get so that it is\n    // easier to work with. Here, we take each list item and create a new array\n    // of objects, each with a \"key\" and a \"value\". We need the \"key\" because\n    // this is the Firebase key for this particular item, and if we want to\n    // update the item then we must use this key\n    const formattedData = Object.entries(this.state.data || {}).map((listItem) => {\n      // listItem is an array with 2 values - the first being the firebase key\n      // and the second being the data itself\n      return {\n        key: listItem[0],\n        value: listItem[1]\n      }\n    })\n\n    return (\n      <div>\n        <InputField />\n        <div className=\"list-group\">\n          {formattedData.map((listItem) => {\n            return (\n              <ListItem\n                // When looping over elements in React, remember to add a unique\n                // \"key\" value. This is so React can optimise its updates and\n                // only update stuff that changes\n                key={listItem.key}\n                firebaseKey={listItem.key}\n                data={listItem.value}\n              />\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoList from '../components/TodoList';\nimport firebase from '../services/firebase';\n\n/**\n * Our LoggedInPage is basically the same as our old App.js, but this time we've\n * added the SignOut button to the field instead.\n */\nconst LoggedIn = () => {\n  return (\n    <div>\n      <p>Logged in. <button onClick={firebase.signOut}>Log out</button></p>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default LoggedIn;\n","import React from 'react';\n\nimport firebase from '../services/firebase';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      errorMessage: ''\n    }\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    if (!this.state.email || !this.state.password) {\n      return;\n    }\n\n    firebase.signIn(this.state.email, this.state.password).catch((error) => {\n      this.setState({\n        errorMessage: error.message\n      })\n    });\n  }\n\n  handleEmailChange = (event) => {\n    this.setState({email: event.target.value});\n  }\n\n  handlePasswordChange = (event) => {\n    this.setState({password: event.target.value});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <div className=\"form-group\">\n          <label>\n            Email address\n            <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={this.handleEmailChange} />\n          </label>\n        </div>\n        <div className=\"form-group\">\n          <label>\n            Password\n            <input type=\"password\" className=\"form-control\" placeholder=\"Password\" onChange={this.handlePasswordChange} />\n          </label>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        {this.state.errorMessage && <div className=\"alert alert-danger\">{this.state.errorMessage}</div>}\n      </form>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from 'react';\n\nimport firebase from '../services/firebase';\n\n/**\n * The registration form is basically the exact same as the <LoginForm />\n * component. The only difference is that when we submit the form, we call\n * \"firebase.createUser\" instead of \"firebase.signIn\"\n */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      errorMessage: ''\n    }\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    if (!this.state.email || !this.state.password) {\n      return;\n    }\n\n    /**\n     * This is (basically) the only difference between the LoginForm and\n     * RegistrationForm\n     */\n    firebase.createUser(this.state.email, this.state.password).catch((error) => {\n      this.setState({\n        errorMessage: error.message\n      })\n    });\n  }\n\n  handleEmailChange = (event) => {\n    this.setState({email: event.target.value});\n  }\n\n  handlePasswordChange = (event) => {\n    this.setState({password: event.target.value});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <div className=\"form-group\">\n          <label>\n            Email address\n            <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={this.handleEmailChange} />\n          </label>\n        </div>\n        <div className=\"form-group\">\n          <label>\n            Password\n            <input type=\"password\" className=\"form-control\" placeholder=\"Password\" onChange={this.handlePasswordChange} />\n          </label>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        {this.state.errorMessage && <div className=\"alert alert-danger\">{this.state.errorMessage}</div>}\n      </form>\n    );\n  }\n}\n\nexport default RegistrationForm;\n","import React from 'react';\n\nimport LoginForm from '../components/LoginForm';\nimport RegistrationForm from '../components/RegistrationForm';\n\nconst LoggedOut = () => {\n  return (\n    <div>\n      <p>You are logged out.</p>\n      <h2>Login</h2>\n      <LoginForm />\n      <h2>Register</h2>\n      <RegistrationForm />\n    </div>\n  );\n}\n\nexport default LoggedOut;\n","import React from 'react';\n\nimport firebase from './services/firebase';\nimport LoggedInPage from './pages/LoggedIn';\nimport LoggedOutPage from './pages/LoggedOut';\n\n/**\n * When we wanted to update this to be a class component, we can look towards\n * our \"TodoList\" component. This was already a class component and\n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoggedIn: firebase.isLoggedIn()\n    }\n  }\n\n  componentDidMount() {\n    firebase.onLoginChange((user) => {\n        if (user) {\n          this.setState({ isLoggedIn: true });\n        } else {\n          this.setState({ isLoggedIn: false });\n        }\n    })\n  }\n\n  render() {\n    if (this.state.isLoggedIn) {\n      return (\n        <div className=\"container\">\n          <h1>Firebase Todo List</h1>\n          <LoggedInPage />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <h1>Firebase Todo List</h1>\n        <LoggedOutPage />\n      </div>\n    );\n    /**\n     * If we wanted to, we could take advantage of \"&&\" which is a short hand\n     * way of doing \"inline\" conditionals. This code would look something like\n     * this;\n     *\n     * return (\n     *   <div className=\"container\">\n     *     <h1>Firebase Todo List</h1>\n     *     {this.state.isLoggedIn && <LoggedInPage />}\n     *     {!this.state.isLoggedIn && <LoggedOutPage />}\n     *   </div>\n     * );\n     */\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}